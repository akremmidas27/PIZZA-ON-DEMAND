#
# Andrew Kremmidas 
# Pizza on Demand  
# 
# DEFINE CLASS-es:
# Pizza - Order - CustomerToppings - ToppingOrder 
# Class - Pizza : To hold the 4 unique sizes of Pizzas that a customer can order
# Class - Order : To hold the ongoing cost of the order including the Pizza
# Class - CustomerToppings: To hold the matrix of toppings that can be selected
# Class - ToppingOrder: To hold the toppings selected by the customer
#
# VARIABLES: 
# size_mappings - Type String, our 4 pizza sizes which will be mapped to the class later
# cost_mappings - Type Integer, our 4 pizza sizes cost related to be mapped to the class later
# topping_mappings - Type String, our 8 topping selections, will be mapped to the class later
# topping_cost_mappings - Type Integer, our 8 topping selections unique costs, mapped to class later
# response - Type String, Customer entered value
# size_wanted - Type String, Customer selected Pizza Size
# sub_size, Type Integer, our pizza size order total cost as an integer  
# sub_toppings, Type Integer, our total cost for toppings as an integer 
# final_total, Type Integer, our total combined cost pizza by size and all toppings 
# final_size, Type Integer, our variable to hold pizza size to be printed later
# final_n_toppings, Type Integer, our variable to hold the count of toppings to be printed later 
#
#
# DEBUG MODE WILL NOT BE ON for Now   
# val = input("Please enter your the mode you want to run either debug or normal: ")
# print("Value entered = ",val)
# if val == 'debug' : debug='yes'  
# elif val != 'debug' : debug = 'no'
#
# print ('debug =', debug)
#
size_mappings = {
    1: "Small",
    2: "Large",
    3: "Extra Large",
    4: "Family Size"
}
# 
# if debug == 'yes' : print (size_mappings)
#
cost_mappings = {
    "Small": 6,
    "Large": 10,
    "Extra Large": 12,
    "Family Size": 24
}
#
# if debug == 'yes' : print (cost_mappings)
#
class Pizza():
    def __init__(self, size):
        self.size = size

    def set_size(self, size):
        self.size = size

    def get_size(self):
        return self.size()

    def get_cost(self):
        return cost_mappings[self.size]
#
#
print 



class Order():
    def __init__(self):
        self.pizzas = []

    def addPizza(self, pizza):
        self.pizzas.append(pizza)

    def getTotal(self):
        total = 0
        for pizza in self.pizzas:
            total += pizza.get_cost()
        return total

# start processing the order
order = Order()


def run():
    print("")
    print("<<< WE ARE READY TO TAKE YOUR ORDER >>>") 
    print("")
    print("Please Select a pizza size:") 
    print("1: Small: Cost is $6")
    print("2: Large: Cost is $10")
    print("3: Extra Large: Cost is $12")
    print("4: Family Size: Cost is $24")
    print("Press 't' to choose your toppings after each selection")
    print("Press 'f' to TOTAL OUT and SUBMIT YOUR ORDER!")
    print("")


    while True:
        try:
            
            response = input('-')

            if response == 't':
                break

            size_wanted = int(response)

            size_wanted = size_mappings[size_wanted]
            

            print(f"You Selected: {size_wanted}")
            order.addPizza(Pizza(size_wanted))
            print("Your Current Order Total Amount is: ", "$" + str(order.getTotal()))
          # order.addPizza(Pizza(size_wanted))
        except:
            print("An error occurred, please try again")
run()

print("Your Current Order Total Amount is: ", "$" + str(order.getTotal()))


topping_mappings = {
                    1: 'Green Peppers', 
                    2: 'Onions', 
                    3: 'Olives', 
                    4: 'Mushrooms', 
                    5: 'Jalapenos', 
                    6: 'Sausage', 
                    7: 'Pepperoni', 
                    8: 'Chicken'  
                    }

topping_cost_mappings = {
                        'Green Peppers': 1.5, 
                        'Onions': 1.2, 
                        'Olives': 1.75, 
                        'Mushrooms': 1.35, 
                        'Jalapenos': 1.75,
                        'Sausage': 3.25,
                        'Pepperoni': 3.10,
                        'Chicken': 3.75
                        }


class CustomerToppings():
    """ Have customer pick toppings for pizza"""
    
    def __init__(self, numToppings):
        self.numToppings = numToppings

    def set_toppings(self, numToppings):
        self.numToppings = numToppings

    def get_toppings(self):
        return topping_cost_mappings[self.numToppings]


class ToppingOrder():

    def __init__(self):
        self.topping = []

    def addTopping(self, toppings): 
        self.topping.append(toppings)

    def toppingTotal(self):
        get_topping_total = 0
        for toppings in self.topping:
            get_topping_total += toppings.get_toppings()
        return get_topping_total

# Strat processing the order
topping_order = ToppingOrder()

def runTopping():
    print("") 
    print("What toppings would you like on your pizza?")
    print("(1) Green Peppers @$1 (2) Onions @$1     (3) Olives @$1")
    print("(4) Mushrooms @$2     (5) Jalapenos @$2")
    print("(6) Sausage @$3       (7) Pepperoni @$3  (8) Chicken @$4") 
    print("Press 'f' for your final total and Complete your order") 
    print("")
  
    while True:
        try: 
            response = input('-')
            if response == 'f':
                break
            toppings_wanted = int(response)

            toppings_wanted = topping_mappings[toppings_wanted]

            print(f"Topping: {toppings_wanted}")
            topping_order.addTopping(CustomerToppings(toppings_wanted))
                           
        except:
            print("An error occurred, please try again - ENTER t or f")

runTopping()

sub_size = int(order.getTotal())
sub_toppings =  int(topping_order.toppingTotal())
final_total = sub_size + sub_toppings

final_size = sub_size 
final_n_toppings = 1


print(f"Your final total will be ${final_total}")
print(f"You ordered the following  final total will be ${final_total}")
print(f"Your ordered the following Pizza Size: ${final_size}")
#print(f"You ordered the following Toppings: ${final_n_toppings}")
#Lets leave this line out for now. 
